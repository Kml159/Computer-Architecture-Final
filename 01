ORG 0 		//STARTE THE PROGRAM FROM LOACTION 0
CIF,		
SKI		// CHECK IF INPUT FLAG IS ENABLED
BUN CIF		// IF NOT CHECK AGAIN
INP		// IF IT IS TAKE THE INPUT
STA INPUT	// STORE THE INPUT IN INPUT VARIABLE
STA ARRANGED 	// TAKE THE INPUT TO EVLAUTE

LOOP,

	// COMPARE FOR BCD0
	LDA BCD     	 // TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE1 	 // AND WITH 0000 0000 1111, TO GET BCD0
	ADD SUBSTRACT1	 // SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA		 // IF X<0 SKIP
	ADD ADDNUM1	 // ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM1	 // SET NUM TO INITIAL
	STA PARSED1	 // STORE PASED VALUE IN PARSED1
	LDA BCD		 // LOAD BCD TO AC
	AND REVPARSE1	 // PARSE BCD WITH 1111 1111 0000
	ADD PARSED1	 // ADD PARSED VALUE TO AC
	STA BCD		 // STORE BCD

	// COMPARE FOR BCD1
	LDA BCD		// TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE2	// AND WITH 0000 1111 0000, TO GET BCD1
	ADD SUBSTRACT2  // SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA		// IF X<0 SKIP
	ADD ADDNUM2     // ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM2	// SET NUM TO INITIAL
	STA PARSED2	// STORE PASED VALUE IN PARSED2
	LDA BCD		// LOAD BCD TO AC
	AND REVPARSE2	// PARSE BCD WITH 1111 0000 1111
	ADD PARSED2	// ADD PARSED VALUE TO AC
	STA BCD	        // STORE BCD
	
	// COMPARE FOR BCD2
	LDA BCD		// TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE3	// AND WITH 1111 0000 0000, TO GET BCD1
	ADD SUBSTRACT3  // SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA 		// IF X<0 SKIP
	ADD ADDNUM3	// ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM3	// SET NUM TO INITIAL
	STA PARSED3	// STORE PASED VALUE IN PARSED3
	LDA BCD		// LOAD BCD TO AC
	AND REVPARSE3	// PARSE BCD WITH 0000 1111 1111 
	ADD PARSED3 	// ADD PARSED VALUE TO AC
	STA BCD		// STORE BCD


	LDA ARRANGED   // TAKE THE VALUE TO THE ACCUMULATOR
	CLE	       // CLEAR THE CARRY BIT
	CIL 	       // SHIFT THE VALUE
	STA ARRANGED   // STORE THE VALUE
	

	LDA BCD
	CIL 
	STA BCD 	// STORE THE VALUE IN BCD VARIABLE
	ISZ CONST	// INCREMENT AND CHECK IF THE CONST1 IS 0 
	BUN LOOP	// IF NOT ITERATE THE LOOP

	HLT

// RESULT
BCD,	DEC 0


INPUT, DEC 0
ARRANGED, DEC 0

// COUNTERS FOR LOOPS
CONST, DEC -16

// NUMBERS FOR FIRST PARSING
PARSE1, HEX F
PARSE2, HEX F0
PARSE3, HEX F00

// NUMBERS TO ADD FOR COMPARE
SUBSTRACT1, 	DEC -5
SUBSTRACT2, 	DEC -80
SUBSTRACT3, 	DEC -1280

// VARIABLES FOR PARSED VALUES
PARSED1, DEC 0
PARSED2, DEC 0
PARSED3, DEC 0

// NUMBERS FOR SECOND PARSING
REVPARSE1, HEX FF0
REVPARSE2, HEX F0F
REVPARSE3, HEX FF

//NUMBERS TO ADD TO RESET BCDX
BACKNUM1,	DEC 5	
BACKNUM2,	DEC 80
BACKNUM3,	DEC 1280

// NUMBER TO ADD IF X >= 5
ADDNUM1, 	DEC 3
ADDNUM2, 	DEC 48
ADDNUM3, 	DEC 768


END