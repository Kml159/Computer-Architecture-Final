ORG 0			// STARTE THE PROGRAM FROM LINE 0
    CLA

// TAKE INPUT
CIF,    SKI		// CHECK IF INPUT FLAG IS ENABLED
    	BUN CIF		// IF NOT CHECK AGAIN
    	INP		// IF IT IS TAKE THE INPUT
    	STA INPUT	// STORE THE INPUT IN INPUT VARIABLE
    	STA arraged	// TAKE THE INPUT TO EVLAUTE
    	CLA

// SLIDE DIGITS TO THE LEFT 8 TIMES
loop1,	LDA arraged	
    	CLE
    	CIL		// SHIFT THE DIGITS TO THE LEFT
    	STA arraged	// STORE THE SHIFTED VALUE
    	ISZ CONST1	// INCREMENT AND CHECK IF THE CONST1 IS 0 
    	BUN loop1	// IF NOT ITERATE THE LOOP

// 0000 0000 1010 1010 -> 1010 1010 0000 0000

loop2,	// PARSE AND CHECK IF X>=5
    LDA arraged		// TAKE THE VALUE TO THE ACCUMULATOR
    CLE			// CLEAR THE CARRY BIT
    CIL			// SHIFT THE VALUE
    STA arraged		// STORE THE VALUE
    CLA			// CLEAR THE ACCUMULATOR
	
		// PROBLEM!!
	// CHECK BCD0
	LDA BCD		// TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE1	// AND WITH 0000 0000 1111, TO GET BCD0

	ADD SUBSTRACT1	// SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA  		// IF X<0 SKIP
	ADD ADDNUM1	// ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM1	// SET NUM TO INITIAL

	// CHECK BCD1
	LDA BCD 	// TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE2	// AND WITH 0000 1111 0000, TO GET BCD1

	ADD SUBSTRACT2	// SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA		// IF X<0 SKIP
	ADD ADDNUM2	// ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM2	// SET NUM TO INITIAL
	
	// CHECK BCD2
	LDA BCD		// TAKE THE VALUE TO THE ACCUMULATOR
	AND PARSE3	// AND WITH 1111 0000 0000, TO GET BCD2

	ADD SUBSTRACT3	// SUBSTACT 5 TO COMPARE IF BIGGER THAN 0
	SNA		// IF X<0 SKIP
	ADD ADDNUM3	// ADD ONLY IF X IS BIGGER THAN 4
	ADD BACKNUM3	// SET NUM TO INITIAL

		// PROBLEM!!
    
    CIL
    STA BCD		// STORE THE VALUE IN BCD VARIABLE
    ISZ CONST2		// INCREMENT AND CHECK IF THE CONST1 IS 0 	
    BUN loop2 		// IF NOT ITERATE THE LOOP

    

	HLT

// IF GREATER THAN 5, ADD 3
// X >= 5, ADD 3

BCD,    	DEC 0

INPUT,   	DEC 0
arraged,  	DEC 0
    
CONST1,  	DEC -8
CONST2, 	DEC -8


// NUMBERS TO ADD FOR COMPARE
SUBSTRACT1, 	DEC -5
SUBSTRACT2, 	DEC -80
SUBSTRACT3, 	DEC -1280

BACKNUM1,	DEC 5	
BACKNUM2,	DEC 80
BACKNUM3,	DEC 1280

// NUMBER TO ADD IF X >= 5
ADDNUM1, 	DEC 3
ADDNUM2, 	DEC 48
ADDNUM3, 	DEC 768


// NUMBER FOR PARSING	// BCD2 BCD1 BCD0
PARSE1, 	HEX F	// 0000 0000 1111
PARSE2, 	HEX F0	// 0000 1111 0000
PARSE3, 	HEX F00	// 1111 0000 0000	

    	END